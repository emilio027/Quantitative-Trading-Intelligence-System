# ============================================================================
# Quantitative Trading Intelligence System - Pytest Configuration
# ============================================================================
# Advanced testing configuration for quantitative finance and trading analytics
# Author: Emilio Cardenas
# Version: 2.0.0
# Last Updated: 2025-08-18
# ============================================================================

[tool:pytest]

# Test discovery patterns
python_files = test_*.py *_test.py tests.py
python_classes = Test* *Tests
python_functions = test_*

# Test directories
testpaths = 
    tests
    Files/tests
    integration_tests
    performance_tests

# Minimum version requirements
minversion = 7.0

# Required plugins for quantitative finance testing
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=Files/src
    --cov=.
    --cov-branch
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing:skip-covered
    --cov-fail-under=85
    --durations=10
    --maxfail=5
    --disable-warnings
    --capture=no
    --junitxml=reports/junit.xml
    --html=reports/report.html
    --self-contained-html

# Pytest markers for different test categories
markers =
    # Core functionality markers
    unit: Unit tests for individual components
    integration: Integration tests for system components
    performance: Performance and benchmarking tests
    smoke: Quick smoke tests for basic functionality
    
    # Trading system specific markers
    backtesting: Backtesting strategy validation tests
    risk_management: Risk management and portfolio tests
    market_data: Market data processing and validation tests
    execution: Trade execution and order management tests
    portfolio: Portfolio management and optimization tests
    
    # Model and algorithm markers
    ml_models: Machine learning model tests
    statistical: Statistical analysis and modeling tests
    optimization: Portfolio optimization algorithm tests
    forecasting: Price and volatility forecasting tests
    signals: Trading signal generation tests
    
    # Data and infrastructure markers
    database: Database connectivity and operations tests
    api: External API integration tests  
    streaming: Real-time data streaming tests
    cache: Caching mechanism tests
    
    # Risk and compliance markers
    compliance: Regulatory compliance tests
    risk_limits: Risk limit validation tests
    stress_test: Stress testing scenarios
    scenario: Scenario analysis tests
    
    # Performance categories
    slow: Tests that take more than 1 second
    fast: Tests that should complete in under 1 second
    memory_intensive: Tests requiring significant memory
    cpu_intensive: Tests requiring significant CPU resources
    
    # Environment markers  
    dev: Development environment tests
    staging: Staging environment tests
    prod: Production environment tests (careful!)
    docker: Docker container tests
    
    # External dependency markers
    requires_market_data: Tests requiring real market data
    requires_network: Tests requiring network connectivity
    requires_gpu: Tests requiring GPU acceleration
    requires_database: Tests requiring database connection
    
    # Regression and validation markers
    regression: Regression tests for known issues
    validation: Model validation and verification tests
    benchmark: Performance benchmark tests
    accuracy: Accuracy validation tests

# Test execution configuration
console_output_style = progress
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Logging configuration for tests
log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d: %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Warnings configuration
filterwarnings =
    # Ignore specific warnings from financial libraries
    ignore::DeprecationWarning:pandas.*
    ignore::DeprecationWarning:numpy.*
    ignore::FutureWarning:sklearn.*
    ignore::UserWarning:matplotlib.*
    ignore::RuntimeWarning:scipy.*
    
    # Trading system specific warning filters
    ignore::UserWarning:yfinance.*
    ignore::FutureWarning:ta.*
    ignore::DeprecationWarning:backtrader.*
    ignore::UserWarning:zipline.*
    
    # Machine learning warnings
    ignore::UserWarning:lightgbm.*
    ignore::UserWarning:xgboost.*
    ignore::ConvergenceWarning:sklearn.*
    
    # Network and API warnings
    ignore::urllib3.exceptions.InsecureRequestWarning
    ignore::requests.packages.urllib3.disable_warnings
    
    # Convert specific warnings to errors for strict testing
    error::UserWarning:Files.*
    error::RuntimeWarning:Files.*

# Timeout configuration
timeout = 300
timeout_method = thread

# Parallel execution configuration
# Enable with: pytest -n auto
# Requires pytest-xdist plugin

# Coverage configuration
# Additional coverage settings beyond addopts
[coverage:run]
source = Files/src, .
branch = True
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */build/*
    */dist/*
    setup.py
    conftest.py

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover
    
    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug
    
    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    
    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
    
    # Don't complain about abstract methods
    @(abc\.)?abstractmethod

precision = 2
show_missing = True
skip_covered = False
sort = Cover

[coverage:html]
directory = htmlcov
title = Quantitative Trading Intelligence System Coverage Report

[coverage:xml]
output = coverage.xml

# ============================================================================
# Environment Variables for Testing
# ============================================================================
# Set these environment variables for comprehensive testing:
#
# TRADING_ENV=test                    # Set testing environment
# MARKET_DATA_API_KEY=test_key       # Mock API key for testing
# DATABASE_URL=sqlite:///:memory:    # In-memory database for tests  
# DISABLE_NETWORK_CALLS=true        # Disable external network calls
# MOCK_MARKET_DATA=true              # Use synthetic market data
# LOG_LEVEL=DEBUG                    # Verbose logging during tests
# PARALLEL_TESTS=4                   # Number of parallel test workers
# ============================================================================

# ============================================================================
# Testing Best Practices for Quantitative Finance
# ============================================================================
# 1. Model Validation:
#    - Always test model accuracy against known datasets
#    - Include edge cases and extreme market conditions
#    - Validate statistical properties of generated signals
#
# 2. Backtesting Integrity:
#    - Test for look-ahead bias in strategy logic
#    - Validate transaction cost modeling
#    - Ensure proper handling of survivorship bias
#
# 3. Risk Management:
#    - Test all risk limits and position sizing rules
#    - Validate portfolio risk metrics calculations
#    - Test stress scenarios and tail risk events
#
# 4. Data Quality:
#    - Test data cleaning and preprocessing pipelines
#    - Validate market data feeds and transformations
#    - Test handling of missing data and market holidays
#
# 5. Performance Testing:
#    - Benchmark critical path performance
#    - Test memory usage with large datasets
#    - Validate real-time processing capabilities
# ============================================================================

# ============================================================================
# Pytest Plugins Configuration
# ============================================================================
# Recommended plugins for quantitative trading systems:
#
# pytest-cov              # Code coverage reporting
# pytest-xdist            # Parallel test execution  
# pytest-html             # HTML test reports
# pytest-timeout          # Test timeout handling
# pytest-benchmark        # Performance benchmarking
# pytest-mock             # Advanced mocking capabilities
# pytest-asyncio          # Async test support
# pytest-datafiles        # Test data file management
# pytest-postgresql       # PostgreSQL testing
# pytest-redis            # Redis testing
# pytest-docker           # Docker integration testing
# ============================================================================

# ============================================================================
# Custom Test Categories Usage Examples
# ============================================================================
# Run only fast unit tests:
#   pytest -m "unit and fast"
#
# Run all tests except slow ones:  
#   pytest -m "not slow"
#
# Run backtesting validation:
#   pytest -m backtesting
#
# Run performance benchmarks:
#   pytest -m benchmark --benchmark-only
#
# Run compliance and risk tests:
#   pytest -m "compliance or risk_limits"
#
# Run integration tests for staging:
#   pytest -m "integration and staging"
# ============================================================================